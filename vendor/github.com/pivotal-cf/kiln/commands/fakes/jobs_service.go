// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type JobsService struct {
	FromDirectoriesStub        func(directories []string) (jobs map[string]interface{}, err error)
	fromDirectoriesMutex       sync.RWMutex
	fromDirectoriesArgsForCall []struct {
		directories []string
	}
	fromDirectoriesReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	fromDirectoriesReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *JobsService) FromDirectories(directories []string) (jobs map[string]interface{}, err error) {
	var directoriesCopy []string
	if directories != nil {
		directoriesCopy = make([]string, len(directories))
		copy(directoriesCopy, directories)
	}
	fake.fromDirectoriesMutex.Lock()
	ret, specificReturn := fake.fromDirectoriesReturnsOnCall[len(fake.fromDirectoriesArgsForCall)]
	fake.fromDirectoriesArgsForCall = append(fake.fromDirectoriesArgsForCall, struct {
		directories []string
	}{directoriesCopy})
	fake.recordInvocation("FromDirectories", []interface{}{directoriesCopy})
	fake.fromDirectoriesMutex.Unlock()
	if fake.FromDirectoriesStub != nil {
		return fake.FromDirectoriesStub(directories)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.fromDirectoriesReturns.result1, fake.fromDirectoriesReturns.result2
}

func (fake *JobsService) FromDirectoriesCallCount() int {
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	return len(fake.fromDirectoriesArgsForCall)
}

func (fake *JobsService) FromDirectoriesArgsForCall(i int) []string {
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	return fake.fromDirectoriesArgsForCall[i].directories
}

func (fake *JobsService) FromDirectoriesReturns(result1 map[string]interface{}, result2 error) {
	fake.FromDirectoriesStub = nil
	fake.fromDirectoriesReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *JobsService) FromDirectoriesReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.FromDirectoriesStub = nil
	if fake.fromDirectoriesReturnsOnCall == nil {
		fake.fromDirectoriesReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.fromDirectoriesReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *JobsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fromDirectoriesMutex.RLock()
	defer fake.fromDirectoriesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *JobsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
